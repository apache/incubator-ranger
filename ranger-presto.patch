diff --git a/agents-common/src/main/java/org/apache/ranger/plugin/store/EmbeddedServiceDefsUtil.java b/agents-common/src/main/java/org/apache/ranger/plugin/store/EmbeddedServiceDefsUtil.java
index 9afd9a67f..4148778f8 100644
--- a/agents-common/src/main/java/org/apache/ranger/plugin/store/EmbeddedServiceDefsUtil.java
+++ b/agents-common/src/main/java/org/apache/ranger/plugin/store/EmbeddedServiceDefsUtil.java
@@ -70,7 +70,7 @@ public class EmbeddedServiceDefsUtil {
 	public static final String EMBEDDED_SERVICEDEF_ABFS_NAME  = "abfs";
 	public static final String EMBEDDED_SERVICEDEF_ELASTICSEARCH_NAME = "elasticsearch";
 	public static final String EMBEDDED_SERVICEDEF_PRESTO_NAME  = "presto";
-        public static final String EMBEDDED_SERVICEDEF_PRESTODB_NAME  = "prestodb";
+	public static final String EMBEDDED_SERVICEDEF_PRESTODB_NAME  = "prestodb";
 	public static final String EMBEDDED_SERVICEDEF_OZONE_NAME  = "ozone";
 
 	public static final String PROPERTY_CREATE_EMBEDDED_SERVICE_DEFS = "ranger.service.store.create.embedded.service-defs";
@@ -87,7 +87,7 @@ public class EmbeddedServiceDefsUtil {
 	public static final String NIFI_IMPL_CLASS_NAME  = "org.apache.ranger.services.nifi.RangerServiceNiFi";
 	public static final String ATLAS_IMPL_CLASS_NAME  = "org.apache.ranger.services.atlas.RangerServiceAtlas";
 	public static final String PRESTO_IMPL_CLASS_NAME  = "org.apache.ranger.services.presto.RangerServicePresto";
-        public static final String PRESTODB_IMPL_CLASS_NAME  = "org.apache.ranger.services.prestodb.RangerServicePresto";
+        public static final String PRESTODB_IMPL_CLASS_NAME  = "org.apache.ranger.services.prestodb.RangerServicePrestoDB";
 	public static final String OZONE_IMPL_CLASS_NAME  = "org.apache.ranger.services.ozone.RangerServiceOzone";
 
 	private static EmbeddedServiceDefsUtil instance = new EmbeddedServiceDefsUtil();
diff --git a/agents-common/src/main/resources/service-defs/ranger-servicedef-prestodb.json b/agents-common/src/main/resources/service-defs/ranger-servicedef-prestodb.json
index 0a5768cca..09fa496fa 100644
--- a/agents-common/src/main/resources/service-defs/ranger-servicedef-prestodb.json
+++ b/agents-common/src/main/resources/service-defs/ranger-servicedef-prestodb.json
@@ -1,7 +1,7 @@
 {
   "id": 18,
   "name": "prestodb",
-  "implClass": "org.apache.ranger.services.prestodb.RangerServicePresto",
+  "implClass": "org.apache.ranger.services.prestodb.RangerServicePrestoDB",
   "label": "PrestoDB",
   "description": "PrestoDB",
   "guid": "379a9fe5-1b6e-4091-a584-4890e245e6c1",
diff --git a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePresto.java b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePrestoDB.java
similarity index 84%
rename from plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePresto.java
rename to plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePrestoDB.java
index ba8c51111..fc354c501 100644
--- a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePresto.java
+++ b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/RangerServicePrestoDB.java
@@ -30,8 +30,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class RangerServicePresto extends RangerBaseService {
-  private static final Log LOG = LogFactory.getLog(RangerServicePresto.class);
+public class RangerServicePrestoDB extends RangerBaseService {
+  private static final Log LOG = LogFactory.getLog(RangerServicePrestoDB.class);
 
   @Override
   public Map<String, Object> validateConfig() throws Exception {
@@ -39,7 +39,7 @@ public class RangerServicePresto extends RangerBaseService {
     String serviceName = getServiceName();
 
     if (LOG.isDebugEnabled()) {
-      LOG.debug("RangerServicePresto.validateConfig(): Service: " +
+      LOG.debug("RangerServicePrestoDB.validateConfig(): Service: " +
         serviceName);
     }
 
@@ -47,13 +47,13 @@ public class RangerServicePresto extends RangerBaseService {
       try {
         ret = PrestoResourceManager.connectionTest(serviceName, configs);
       } catch (HadoopException he) {
-        LOG.error("<== RangerServicePresto.validateConfig Error:" + he);
+        LOG.error("<== RangerServicePrestoDB.validateConfig Error:" + he);
         throw he;
       }
     }
 
     if (LOG.isDebugEnabled()) {
-      LOG.debug("RangerServicePresto.validateConfig(): Response: " +
+      LOG.debug("RangerServicePrestoDB.validateConfig(): Response: " +
         ret);
     }
     return ret;
@@ -73,12 +73,12 @@ public class RangerServicePresto extends RangerBaseService {
       try {
         ret  = PrestoResourceManager.getPrestoResources(serviceName, serviceType, configs,context);
       } catch (Exception e) {
-        LOG.error( "<==RangerServicePresto.lookupResource Error : " + e);
+        LOG.error( "<==RangerServicePrestoDB.lookupResource Error : " + e);
         throw e;
       }
     }
     if(LOG.isDebugEnabled()) {
-      LOG.debug("<== RangerServicePresto.lookupResource Response: (" + ret + ")");
+      LOG.debug("<== RangerServicePrestoDB.lookupResource Response: (" + ret + ")");
     }
     return ret;
   }
diff --git a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoConnectionManager.java b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoConnectionManager.java
index b337108e5..f8304e37e 100644
--- a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoConnectionManager.java
+++ b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoConnectionManager.java
@@ -30,7 +30,7 @@ import java.util.concurrent.TimeUnit;
 public class PrestoConnectionManager {
   private static final Logger LOG = Logger.getLogger(PrestoConnectionManager.class);
 
-  protected ConcurrentMap<String, PrestoClient> prestoConnectionCache;
+  protected ConcurrentMap<String, PrestoDBClient> prestoConnectionCache;
   protected ConcurrentMap<String, Boolean> repoConnectStatusMap;
 
   public PrestoConnectionManager() {
@@ -38,17 +38,17 @@ public class PrestoConnectionManager {
     repoConnectStatusMap = new ConcurrentHashMap<>();
   }
 
-  public PrestoClient getPrestoConnection(final String serviceName, final String serviceType, final Map<String, String> configs) {
-    PrestoClient prestoClient = null;
+  public PrestoDBClient getPrestoConnection(final String serviceName, final String serviceType, final Map<String, String> configs) {
+    PrestoDBClient prestoClient = null;
 
     if (serviceType != null) {
       prestoClient = prestoConnectionCache.get(serviceName);
       if (prestoClient == null) {
         if (configs != null) {
-          final Callable<PrestoClient> connectPresto = new Callable<PrestoClient>() {
+          final Callable<PrestoDBClient> connectPresto = new Callable<PrestoDBClient>() {
             @Override
-            public PrestoClient call() throws Exception {
-              return new PrestoClient(serviceName, configs);
+            public PrestoDBClient call() throws Exception {
+              return new PrestoDBClient(serviceName, configs);
             }
           };
           try {
@@ -58,7 +58,7 @@ public class PrestoConnectionManager {
             serviceName + " using config: " + configs, e);
           }
 
-          PrestoClient oldClient = null;
+          PrestoDBClient oldClient = null;
           if (prestoClient != null) {
             oldClient = prestoConnectionCache.putIfAbsent(serviceName, prestoClient);
           } else {
diff --git a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoClient.java b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoDBClient.java
similarity index 94%
rename from plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoClient.java
rename to plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoDBClient.java
index 9f8880c2f..a674b7810 100644
--- a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoClient.java
+++ b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoDBClient.java
@@ -42,11 +42,11 @@ import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
-public class PrestoClient extends BaseClient implements Closeable {
+public class PrestoDBClient extends BaseClient implements Closeable {
   public static final String PRESTO_USER_NAME_PROP = "user";
   public static final String PRESTO_PASSWORD_PROP = "password";
 
-  private static final Log LOG = LogFactory.getLog(PrestoClient.class);
+  private static final Log LOG = LogFactory.getLog(PrestoDBClient.class);
 
   private static final String ERR_MSG = "You can still save the repository and start creating "
     + "policies, but you would not be able to use autocomplete for "
@@ -54,12 +54,12 @@ public class PrestoClient extends BaseClient implements Closeable {
 
   private Connection con;
 
-  public PrestoClient(String serviceName) throws Exception {
+  public PrestoDBClient(String serviceName) throws Exception {
     super(serviceName, null);
     init();
   }
 
-  public PrestoClient(String serviceName, Map<String, String> properties) throws Exception {
+  public PrestoDBClient(String serviceName, Map<String, String> properties) throws Exception {
     super(serviceName, properties);
     init();
   }
@@ -210,7 +210,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         try {
           ret = getCatalogs(ndl, catList);
         } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getCatalogList() :Unable to get the Database List", he);
+          LOG.error("<== PrestoDBClient getCatalogList() :Unable to get the Database List", he);
           throw he;
         }
         return ret;
@@ -261,7 +261,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         hdpException.generateResponseDataMap(false, getMessage(sqlt),
           msgDesc + ERR_MSG, null, null);
         if (LOG.isDebugEnabled()) {
-          LOG.debug("<== PrestoClient.getSchemas() Error : ", sqlt);
+          LOG.debug("<== PrestoDBClient.getSchemas() Error : ", sqlt);
         }
         throw hdpException;
       } catch (SQLException sqle) {
@@ -271,7 +271,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         hdpException.generateResponseDataMap(false, getMessage(sqle),
           msgDesc + ERR_MSG, null, null);
         if (LOG.isDebugEnabled()) {
-          LOG.debug("<== PrestoClient.getSchemas() Error : ", sqle);
+          LOG.debug("<== PrestoDBClient.getSchemas() Error : ", sqle);
         }
         throw hdpException;
       }
@@ -292,7 +292,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         try {
           ret = getSchemas(ndl, cats, shms);
         } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getSchemaList() :Unable to get the Schema List", he);
+          LOG.error("<== PrestoDBClient getSchemaList() :Unable to get the Schema List", he);
         }
         return ret;
       }
@@ -343,7 +343,7 @@ public class PrestoClient extends BaseClient implements Closeable {
           hdpException.generateResponseDataMap(false, getMessage(sqlt),
             msgDesc + ERR_MSG, null, null);
           if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getTables() Error : ", sqlt);
+            LOG.debug("<== PrestoDBClient.getTables() Error : ", sqlt);
           }
           throw hdpException;
         } catch (SQLException sqle) {
@@ -353,7 +353,7 @@ public class PrestoClient extends BaseClient implements Closeable {
           hdpException.generateResponseDataMap(false, getMessage(sqle),
             msgDesc + ERR_MSG, null, null);
           if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getTables() Error : ", sqle);
+            LOG.debug("<== PrestoDBClient.getTables() Error : ", sqle);
           }
           throw hdpException;
         }
@@ -375,7 +375,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         try {
           ret = getTables(ndl, cats, shms, tbls);
         } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getTableList() :Unable to get the Column List", he);
+          LOG.error("<== PrestoDBClient getTableList() :Unable to get the Column List", he);
           throw he;
         }
         return ret;
@@ -439,7 +439,7 @@ public class PrestoClient extends BaseClient implements Closeable {
           hdpException.generateResponseDataMap(false, getMessage(sqlt),
             msgDesc + ERR_MSG, null, null);
           if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getColumns() Error : ", sqlt);
+            LOG.debug("<== PrestoDBClient.getColumns() Error : ", sqlt);
           }
           throw hdpException;
         } catch (SQLException sqle) {
@@ -449,7 +449,7 @@ public class PrestoClient extends BaseClient implements Closeable {
           hdpException.generateResponseDataMap(false, getMessage(sqle),
             msgDesc + ERR_MSG, null, null);
           if (LOG.isDebugEnabled()) {
-            LOG.debug("<== PrestoClient.getColumns() Error : ", sqle);
+            LOG.debug("<== PrestoDBClient.getColumns() Error : ", sqle);
           }
           throw hdpException;
         }
@@ -472,7 +472,7 @@ public class PrestoClient extends BaseClient implements Closeable {
         try {
           ret = getColumns(ndl, cats, shms, tbls, cols);
         } catch (HadoopException he) {
-          LOG.error("<== PrestoClient getColumnList() :Unable to get the Column List", he);
+          LOG.error("<== PrestoDBClient getColumnList() :Unable to get the Column List", he);
           throw he;
         }
         return ret;
@@ -484,7 +484,7 @@ public class PrestoClient extends BaseClient implements Closeable {
   public static Map<String, Object> connectionTest(String serviceName,
                                                    Map<String, String> connectionProperties)
     throws Exception {
-    PrestoClient client = null;
+    PrestoDBClient client = null;
     Map<String, Object> resp = new HashMap<String, Object>();
 
     boolean status = false;
@@ -492,7 +492,7 @@ public class PrestoClient extends BaseClient implements Closeable {
     List<String> testResult = null;
 
     try {
-      client = new PrestoClient(serviceName, connectionProperties);
+      client = new PrestoDBClient(serviceName, connectionProperties);
       if (client != null) {
         testResult = client.getCatalogList("*", null);
         if (testResult != null && testResult.size() != 0) {
diff --git a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoResourceManager.java b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoResourceManager.java
index e1d08ff87..5b77ba996 100644
--- a/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoResourceManager.java
+++ b/plugin-prestodb/src/main/java/org/apache/ranger/services/prestodb/client/PrestoResourceManager.java
@@ -33,8 +33,8 @@ public class PrestoResourceManager {
 
   private static final String  CATALOG 	  = "catalog";
   private static final String  SCHEMA     = "schema";
-  private static final String  TABLE	 	  = "table";
-  private static final String  COLUMN	 	  = "column";
+  private static final String  TABLE	  = "table";
+  private static final String  COLUMN	  = "column";
 
 
   public static Map<String, Object> connectionTest(String serviceName, Map<String, String> configs) throws Exception {
@@ -45,7 +45,7 @@ public class PrestoResourceManager {
     }
 
     try {
-      ret = PrestoClient.connectionTest(serviceName, configs);
+      ret = PrestoDBClient.connectionTest(serviceName, configs);
     } catch (Exception e) {
       LOG.error("<== PrestoResourceManager.connectionTest Error: " + e);
       throw e;
@@ -110,7 +110,7 @@ public class PrestoResourceManager {
             + tableList + " columnList: " + columnList);
         }
 
-        final PrestoClient prestoClient = new PrestoConnectionManager().getPrestoConnection(serviceName, serviceType, configs);
+        final PrestoDBClient prestoClient = new PrestoConnectionManager().getPrestoConnection(serviceName, serviceType, configs);
 
         Callable<List<String>> callableObj = null;
 
@@ -165,7 +165,7 @@ public class PrestoResourceManager {
               resultList = TimedEventUtil.timedTask(callableObj, 5, TimeUnit.SECONDS);
             }
           } else {
-            LOG.error("Could not initiate a PrestoClient timedTask");
+            LOG.error("Could not initiate a PrestoDBClient timedTask");
           }
         }
       } catch (Exception e) {
